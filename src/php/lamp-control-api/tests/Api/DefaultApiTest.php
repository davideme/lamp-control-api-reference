<?php

/**
 * Lamp Control API
 * PHP version 8.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * A simple API for controlling lamps, demonstrating CRUD operations.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPIServer\Api;

use OpenAPIServer\Api\DefaultApi;
use PHPUnit\Framework\TestCase;
use Slim\Psr7\Factory\StreamFactory;
use Slim\Psr7\Response;
use Slim\Psr7\Headers;
use Slim\Psr7\Request as SlimRequest;
use Slim\Psr7\Uri;

/**
 * DefaultApiTest Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Api\DefaultApi
 */
class DefaultApiTest extends TestCase
{
    private function createJsonRequest(string $method, string $path, array $body = null): SlimRequest
    {
        $uri = new Uri('', '', 80, $path);
        $headers = new Headers([
            'Content-Type' => ['application/json'],
            'Accept' => ['application/json'],
        ]);
        $cookies = [];
        $serverParams = [];
        $streamFactory = new StreamFactory();
        $stream = $streamFactory->createStream($body ? json_encode($body) : '');
        return new SlimRequest($method, $uri, $headers, $cookies, $serverParams, $stream);
    }

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void {}

    /**
     * Setup before running each test case
     */
    public function setUp(): void {}

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void {}

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void {}

    /**
     * Test case for createLamp
     *
     * Create a new lamp.
     *
     * @covers ::createLamp
     */
    public function testCreateLamp()
    {
        $api = new DefaultApi();

        // Create a request to create a lamp (status only, boolean)
        $request = $this->createJsonRequest('POST', '/lamps', [
            'status' => true,
        ]);
        $response = new Response();
        $response = $api->createLamp($request, $response);
        $this->assertEquals(201, $response->getStatusCode());
        $lamp = json_decode((string)$response->getBody(), true);
        $this->assertArrayHasKey('id', $lamp);
        $this->assertArrayHasKey('status', $lamp);
        $this->assertTrue($lamp['status']);
        $lampId = $lamp['id'];

        // 2. List lamps
        $request = $this->createJsonRequest('GET', '/lamps');
        $response = new Response();
        $response = $api->listLamps($request, $response);
        $this->assertEquals(200, $response->getStatusCode());
        $lamps = json_decode((string)$response->getBody(), true);
        $this->assertIsArray($lamps);
        $this->assertNotEmpty($lamps);
        $this->assertEquals($lampId, $lamps[0]['id']);

        // 3. Get lamp
        $request = $this->createJsonRequest('GET', "/lamps/{$lampId}");
        $response = new Response();
        $response = $api->getLamp($request, $response, (string)$lampId);
        $this->assertEquals(200, $response->getStatusCode());
        $lampFetched = json_decode((string)$response->getBody(), true);
        $this->assertEquals($lampId, $lampFetched['id']);
        $this->assertTrue($lampFetched['status']);

        // 4. Update lamp (turn off)
        $request = $this->createJsonRequest('PUT', "/lamps/{$lampId}", [
            'status' => false,
        ]);
        $response = new Response();
        $response = $api->updateLamp($request, $response, (string)$lampId);
        $this->assertEquals(200, $response->getStatusCode());
        $lampUpdated = json_decode((string)$response->getBody(), true);
        $this->assertFalse($lampUpdated['status']);

        // 5. Delete lamp
        $request = $this->createJsonRequest('DELETE', "/lamps/{$lampId}");
        $response = new Response();
        $response = $api->deleteLamp($request, $response, (string)$lampId);
        $this->assertEquals(204, $response->getStatusCode());

        // 6. Get deleted lamp (should 404)
        $request = $this->createJsonRequest('GET', "/lamps/{$lampId}");
        $response = new Response();
        $response = $api->getLamp($request, $response, (string)$lampId);
        $this->assertEquals(404, $response->getStatusCode());
    }
}
