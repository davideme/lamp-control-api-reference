<?php

/**
 * Lamp Control API
 * PHP version 8.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * A simple API for controlling lamps, demonstrating CRUD operations.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPIServer\Model;

use PHPUnit\Framework\TestCase;
use OpenAPIServer\Model\ListLamps200Response;

/**
 * ListLamps200ResponseTest Class Doc Comment
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Model\ListLamps200Response
 */
class ListLamps200ResponseTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "ListLamps200Response"
     */
    public function testListLamps200Response()
    {
        $testListLamps200Response = new ListLamps200Response();
        $namespacedClassname = ListLamps200Response::getModelsNamespace() . '\\ListLamps200Response';
        $this->assertSame('\\' . ListLamps200Response::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );

        // Test that the list lamps response model can be created
        $this->assertInstanceOf(ListLamps200Response::class, $testListLamps200Response);

        // Test setting and getting data
        $responseData = [
            'data' => [
                [
                    'id' => '123e4567-e89b-12d3-a456-426614174000',
                    'status' => true,
                    'createdAt' => '2023-01-01T00:00:00Z',
                    'updatedAt' => '2023-01-01T00:00:00Z'
                ]
            ],
            'nextCursor' => 'cursor123',
            'hasMore' => false
        ];
        $testListLamps200Response->setData($responseData);

        $retrievedData = $testListLamps200Response->getData();
        $this->assertEquals($responseData['data'], $retrievedData->data);
        $this->assertEquals($responseData['nextCursor'], $retrievedData->nextCursor);
        $this->assertEquals($responseData['hasMore'], $retrievedData->hasMore);

        // Test JSON serialization
        $json = json_encode($testListLamps200Response);
        $this->assertJson($json);
        $decoded = json_decode($json, true);
        $this->assertEquals($responseData['data'], $decoded['data']);
        $this->assertEquals($responseData['nextCursor'], $decoded['nextCursor']);
        $this->assertEquals($responseData['hasMore'], $decoded['hasMore']);
    }

    /**
     * Test attribute "data"
     */
    public function testPropertyData()
    {
        $testListLamps200Response = new ListLamps200Response();

        // Test setting data property with empty array
        $testListLamps200Response->data = [];
        $this->assertEquals([], $testListLamps200Response->data);

        // Test setting data property with lamp data
        $lampData = [
            [
                'id' => '123e4567-e89b-12d3-a456-426614174000',
                'status' => true,
                'createdAt' => '2023-01-01T00:00:00Z',
                'updatedAt' => '2023-01-01T00:00:00Z'
            ],
            [
                'id' => 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
                'status' => false,
                'createdAt' => '2023-01-02T00:00:00Z',
                'updatedAt' => '2023-01-02T00:00:00Z'
            ]
        ];
        $testListLamps200Response->data = $lampData;
        $this->assertEquals($lampData, $testListLamps200Response->data);
    }

    /**
     * Test attribute "nextCursor"
     */
    public function testPropertyNextCursor()
    {
        $testListLamps200Response = new ListLamps200Response();

        // Test setting nextCursor to a string value
        $testListLamps200Response->nextCursor = 'cursor123';
        $this->assertEquals('cursor123', $testListLamps200Response->nextCursor);

        // Test setting nextCursor to null (nullable property)
        $testListLamps200Response->nextCursor = null;
        $this->assertNull($testListLamps200Response->nextCursor);

        // Test setting nextCursor to empty string
        $testListLamps200Response->nextCursor = '';
        $this->assertEquals('', $testListLamps200Response->nextCursor);

        // Test that nextCursor property appears in schema and is nullable
        $schema = ListLamps200Response::getOpenApiSchema();
        $this->assertArrayHasKey('properties', $schema);
        $this->assertArrayHasKey('nextCursor', $schema['properties']);
        $this->assertEquals('string', $schema['properties']['nextCursor']['type']);
        $this->assertTrue($schema['properties']['nextCursor']['nullable']);
    }

    /**
     * Test attribute "hasMore"
     */
    public function testPropertyHasMore()
    {
        $testListLamps200Response = new ListLamps200Response();

        // Test setting hasMore to true
        $testListLamps200Response->hasMore = true;
        $this->assertTrue($testListLamps200Response->hasMore);

        // Test setting hasMore to false
        $testListLamps200Response->hasMore = false;
        $this->assertFalse($testListLamps200Response->hasMore);

        // Test that required hasMore property appears in schema
        $schema = ListLamps200Response::getOpenApiSchema();
        $this->assertArrayHasKey('required', $schema);
        $this->assertContains('hasMore', $schema['required']);
        $this->assertContains('data', $schema['required']);
        $this->assertArrayHasKey('properties', $schema);
        $this->assertArrayHasKey('hasMore', $schema['properties']);
        $this->assertEquals('boolean', $schema['properties']['hasMore']['type']);

        // Test data property schema
        $this->assertArrayHasKey('data', $schema['properties']);
        $this->assertEquals('array', $schema['properties']['data']['type']);
        $this->assertArrayHasKey('items', $schema['properties']['data']);
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = ListLamps200Response::getOpenApiSchema();
        /** @phpstan-ignore-next-line method.alreadyNarrowedType */
        $this->assertIsArray($schemaArr);
    }
}
