<?php

/**
 * Lamp Control API
 * PHP version 8.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * A simple API for controlling lamps, demonstrating CRUD operations.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPIServer\Model;

use PHPUnit\Framework\TestCase;
use OpenAPIServer\Model\Lamp;

/**
 * LampTest Class Doc Comment
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Model\Lamp
 */
class LampTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "Lamp"
     */
    public function testLamp()
    {
        $testLamp = new Lamp();
        $namespacedClassname = Lamp::getModelsNamespace() . '\\Lamp';
        $this->assertSame('\\' . Lamp::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );

        // Test that the lamp can be created
        $this->assertInstanceOf(Lamp::class, $testLamp);

        // Test setting and getting data
        $lampData = [
            'id' => '123e4567-e89b-12d3-a456-426614174000',
            'status' => true,
            'createdAt' => '2023-01-01T00:00:00Z',
            'updatedAt' => '2023-01-01T00:00:00Z'
        ];
        $testLamp->setData($lampData);

        $retrievedData = $testLamp->getData();
        $this->assertEquals($lampData['id'], $retrievedData->id);
        $this->assertEquals($lampData['status'], $retrievedData->status);
        $this->assertEquals($lampData['createdAt'], $retrievedData->createdAt);
        $this->assertEquals($lampData['updatedAt'], $retrievedData->updatedAt);

        // Test JSON serialization
        $json = json_encode($testLamp);
        $this->assertJson($json);
        $decoded = json_decode($json, true);
        $this->assertEquals($lampData['id'], $decoded['id']);
        $this->assertEquals($lampData['status'], $decoded['status']);
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        $testLamp = new Lamp();

        // Test setting id property
        $testId = '123e4567-e89b-12d3-a456-426614174000';
        $testLamp->id = $testId;
        $this->assertEquals($testId, $testLamp->id);

        // Test with different UUID format
        $testId2 = 'f47ac10b-58cc-4372-a567-0e02b2c3d479';
        $testLamp->id = $testId2;
        $this->assertEquals($testId2, $testLamp->id);

        // Test that invalid property access throws exception
        $this->expectException(\InvalidArgumentException::class);
        $invalidProp = $testLamp->invalidProperty;
    }

    /**
     * Test attribute "status"
     */
    public function testPropertyStatus()
    {
        $testLamp = new Lamp();

        // Test setting status to true
        $testLamp->status = true;
        $this->assertTrue($testLamp->status);

        // Test setting status to false
        $testLamp->status = false;
        $this->assertFalse($testLamp->status);

        // Test setting status as integer (should work due to PHP type coercion)
        $testLamp->status = 1;
        $this->assertEquals(1, $testLamp->status);

        $testLamp->status = 0;
        $this->assertEquals(0, $testLamp->status);
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = Lamp::getOpenApiSchema();
        /** @phpstan-ignore-next-line method.alreadyNarrowedType */
        $this->assertIsArray($schemaArr);
    }
}
