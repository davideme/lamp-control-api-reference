<?php

/**
 * Lamp Control API
 * PHP version 8.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * A simple API for controlling lamps, demonstrating CRUD operations.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPIServer\Model;

use PHPUnit\Framework\TestCase;
use OpenAPIServer\Model\Error;

/**
 * ErrorTest Class Doc Comment
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Model\Error
 */
class ErrorTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "Error"
     */
    public function testError()
    {
        $testError = new Error();
        $namespacedClassname = Error::getModelsNamespace() . '\\Error';
        $this->assertSame('\\' . Error::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );
        
        // Test that the error model can be created
        $this->assertInstanceOf(Error::class, $testError);
        
        // Test setting and getting data
        $errorData = [
            'error' => 'INVALID_ARGUMENT'
        ];
        $testError->setData($errorData);
        
        $retrievedData = $testError->getData();
        $this->assertEquals($errorData['error'], $retrievedData->error);
        
        // Test JSON serialization
        $json = json_encode($testError);
        $this->assertJson($json);
        $decoded = json_decode($json, true);
        $this->assertEquals($errorData['error'], $decoded['error']);
        
        // Test creating from data directly
        $errorFromData = Error::createFromData(['error' => 'NOT_FOUND']);
        $this->assertInstanceOf(Error::class, $errorFromData);
        $this->assertEquals('NOT_FOUND', $errorFromData->error);
    }

    /**
     * Test attribute "error"
     */
    public function testPropertyError()
    {
        $testError = new Error();
        
        // Test setting error property
        $testError->error = 'INVALID_ARGUMENT';
        $this->assertEquals('INVALID_ARGUMENT', $testError->error);
        
        // Test setting different error type
        $testError->error = 'NOT_FOUND';
        $this->assertEquals('NOT_FOUND', $testError->error);
        
        // Test setting empty string
        $testError->error = '';
        $this->assertEquals('', $testError->error);
        
        // Test that required error property appears in schema
        $schema = Error::getOpenApiSchema();
        $this->assertArrayHasKey('required', $schema);
        $this->assertContains('error', $schema['required']);
        $this->assertArrayHasKey('properties', $schema);
        $this->assertArrayHasKey('error', $schema['properties']);
        $this->assertEquals('string', $schema['properties']['error']['type']);
        $this->assertEquals('Error type identifier', $schema['properties']['error']['description']);
        $this->assertEquals('INVALID_ARGUMENT', $schema['properties']['error']['example']);
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = Error::getOpenApiSchema();
        /** @phpstan-ignore-next-line method.alreadyNarrowedType */
        $this->assertIsArray($schemaArr);
    }
}
