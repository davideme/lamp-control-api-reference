<?php

/**
 * Lamp Control API
 * PHP version 8.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * A simple API for controlling lamps, demonstrating CRUD operations.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPIServer\Model;

use PHPUnit\Framework\TestCase;
use OpenAPIServer\Model\LampCreate;

/**
 * LampCreateTest Class Doc Comment
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Model\LampCreate
 */
class LampCreateTest extends TestCase
{
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "LampCreate"
     */
    public function testLampCreate()
    {
        $testLampCreate = new LampCreate();
        $namespacedClassname = LampCreate::getModelsNamespace() . '\\LampCreate';
        $this->assertSame('\\' . LampCreate::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );

        // Test that the lamp create model can be created
        $this->assertInstanceOf(LampCreate::class, $testLampCreate);

        // Test setting and getting data
        $lampCreateData = [
            'status' => true
        ];
        $testLampCreate->setData($lampCreateData);

        $retrievedData = $testLampCreate->getData();
        $this->assertEquals($lampCreateData['status'], $retrievedData->status);

        // Test JSON serialization
        $json = json_encode($testLampCreate);
        $this->assertJson($json);
        $decoded = json_decode($json, true);
        $this->assertEquals($lampCreateData['status'], $decoded['status']);

        // Test creating from data directly
        $lampCreateFromData = LampCreate::createFromData(['status' => false]);
        $this->assertInstanceOf(LampCreate::class, $lampCreateFromData);
        $this->assertFalse($lampCreateFromData->status);
    }

    /**
     * Test attribute "status"
     */
    public function testPropertyStatus()
    {
        $testLampCreate = new LampCreate();

        // Test setting status to true
        $testLampCreate->status = true;
        $this->assertTrue($testLampCreate->status);

        // Test setting status to false
        $testLampCreate->status = false;
        $this->assertFalse($testLampCreate->status);

        // Test that required status property appears in schema
        $schema = LampCreate::getOpenApiSchema();
        $this->assertArrayHasKey('required', $schema);
        $this->assertContains('status', $schema['required']);
        $this->assertArrayHasKey('properties', $schema);
        $this->assertArrayHasKey('status', $schema['properties']);
        $this->assertEquals('boolean', $schema['properties']['status']['type']);
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = LampCreate::getOpenApiSchema();
        /** @phpstan-ignore-next-line method.alreadyNarrowedType */
        $this->assertIsArray($schemaArr);
    }
}
