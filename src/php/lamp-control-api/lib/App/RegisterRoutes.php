<?php

/**
 * Lamp Control API
 * PHP version 8.1
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * A simple API for controlling lamps, demonstrating CRUD operations.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


declare(strict_types=1);

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPIServer\App;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * RegisterRoutes Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class RegisterRoutes
{
  /** @var array<int, array<string, mixed>> list of all api operations */
  private $operations = [
    [
      'httpMethod' => 'POST',
      'basePathWithoutHost' => '/v1',
      'path' => '/lamps',
      'apiPackage' => 'OpenAPIServer\Api',
      'classname' => 'AbstractDefaultApi',
      'userClassname' => 'DefaultApi',
      'operationId' => 'createLamp',
      'responses' => [
        '201' => [
          'jsonSchema' => '{
  "description" : "Lamp created successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Lamp"
      }
    }
  }
}',
        ],
        '400' => [
          'jsonSchema' => '{
  "description" : "Invalid request data",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Error"
      },
      "example" : {
        "error" : "INVALID_ARGUMENT",
        "message" : "The request contains invalid parameters or malformed data",
        "details" : "Invalid format for parameter \"status\": expected boolean"
      }
    }
  }
}',
        ],
      ],
      'authMethods' => [],
    ],
    [
      'httpMethod' => 'GET',
      'basePathWithoutHost' => '/v1',
      'path' => '/lamps',
      'apiPackage' => 'OpenAPIServer\Api',
      'classname' => 'AbstractDefaultApi',
      'userClassname' => 'DefaultApi',
      'operationId' => 'listLamps',
      'responses' => [
        '200' => [
          'jsonSchema' => '{
  "description" : "A list of lamps with pagination",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/listLamps_200_response"
      }
    }
  }
}',
        ],
        '304' => [
          'jsonSchema' => '{
  "description" : "Not Modified"
}',
        ],
        '400' => [
          'jsonSchema' => '{
  "description" : "Invalid request parameters",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Error"
      },
      "example" : {
        "error" : "INVALID_ARGUMENT",
        "message" : "Invalid query parameter \"pageSize\""
      }
    }
  }
}',
        ],
      ],
      'authMethods' => [],
    ],
    [
      'httpMethod' => 'DELETE',
      'basePathWithoutHost' => '/v1',
      'path' => '/lamps/{lampId}',
      'apiPackage' => 'OpenAPIServer\Api',
      'classname' => 'AbstractDefaultApi',
      'userClassname' => 'DefaultApi',
      'operationId' => 'deleteLamp',
      'responses' => [
        '204' => [
          'jsonSchema' => '{
  "description" : "Lamp deleted successfully"
}',
        ],
        '400' => [
          'jsonSchema' => '{
  "description" : "Invalid lamp ID format",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Error"
      },
      "example" : {
        "error" : "INVALID_ARGUMENT",
        "message" : "The request contains invalid parameters or malformed data",
        "details" : "Invalid format for parameter \"lampId\""
      }
    }
  }
}',
        ],
        '404' => [
          'jsonSchema' => '{
  "description" : "Lamp not found"
}',
        ],
      ],
      'authMethods' => [],
    ],
    [
      'httpMethod' => 'GET',
      'basePathWithoutHost' => '/v1',
      'path' => '/lamps/{lampId}',
      'apiPackage' => 'OpenAPIServer\Api',
      'classname' => 'AbstractDefaultApi',
      'userClassname' => 'DefaultApi',
      'operationId' => 'getLamp',
      'responses' => [
        '200' => [
          'jsonSchema' => '{
  "description" : "Lamp details",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Lamp"
      }
    }
  }
}',
        ],
        '304' => [
          'jsonSchema' => '{
  "description" : "Not Modified"
}',
        ],
        '400' => [
          'jsonSchema' => '{
  "description" : "Invalid lamp ID format",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Error"
      },
      "example" : {
        "error" : "INVALID_ARGUMENT",
        "message" : "The request contains invalid parameters or malformed data",
        "details" : "Invalid format for parameter \"lampId\""
      }
    }
  }
}',
        ],
        '404' => [
          'jsonSchema' => '{
  "description" : "Lamp not found"
}',
        ],
      ],
      'authMethods' => [],
    ],
    [
      'httpMethod' => 'PUT',
      'basePathWithoutHost' => '/v1',
      'path' => '/lamps/{lampId}',
      'apiPackage' => 'OpenAPIServer\Api',
      'classname' => 'AbstractDefaultApi',
      'userClassname' => 'DefaultApi',
      'operationId' => 'updateLamp',
      'responses' => [
        '200' => [
          'jsonSchema' => '{
  "description" : "Lamp updated successfully",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Lamp"
      }
    }
  }
}',
        ],
        '400' => [
          'jsonSchema' => '{
  "description" : "Invalid request data or lamp ID format",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/Error"
      },
      "example" : {
        "error" : "INVALID_ARGUMENT",
        "message" : "The request contains invalid parameters or malformed data",
        "details" : "Invalid format for parameter \"status\": expected boolean"
      }
    }
  }
}',
        ],
        '404' => [
          'jsonSchema' => '{
  "description" : "Lamp not found"
}',
        ],
      ],
      'authMethods' => [],
    ],
  ];

  /**
   * Add routes to Slim app.
   *
   * @param \Slim\App $app Pre-configured Slim application instance
   *
   * @throws HttpNotImplementedException When implementation class doesn't exists
   */
  public function __invoke(\Slim\App $app): void
  {
    $app->options('/{routes:.*}', function (ServerRequestInterface $request, ResponseInterface $response) {
      // CORS Pre-Flight OPTIONS Request Handler
      return $response;
    });

    // create mock middleware factory
    /** @var \Psr\Container\ContainerInterface */
    $container = $app->getContainer();
    /** @var \OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory|null */
    $mockMiddlewareFactory = null;
    if ($container->has(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class)) {
      // I know, anti-pattern. Don't retrieve dependency directly from container
      $mockMiddlewareFactory = $container->get(
        \OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class
      );
    }

    foreach ($this->operations as $operation) {
      $callback = function (ServerRequestInterface $request) use ($operation) {
        $message =
          "How about extending {$operation['classname']} " .
          "by {$operation['apiPackage']}\\{$operation['userClassname']} " .
          "class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
        throw new HttpNotImplementedException($request, $message);
      };
      $middlewares = [];

      if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
        // Notice how we register the controller using the class name?
        // PHP-DI will instantiate the class for us only when it's actually necessary
        $callback = ["\\{$operation['apiPackage']}\\{$operation['userClassname']}", $operation['operationId']];
      }

      if ($mockMiddlewareFactory) {
        $mockSchemaResponses = array_map(function ($item) {
          return json_decode($item['jsonSchema'], true);
        }, $operation['responses']);
        $middlewares[] = $mockMiddlewareFactory->create($mockSchemaResponses);
      }

      // Use specific HTTP method functions instead of generic map()
      switch (strtoupper($operation['httpMethod'])) {
        case 'GET':
          $route = $app->get("{$operation['basePathWithoutHost']}{$operation['path']}", $callback);
          break;
        case 'POST':
          $route = $app->post("{$operation['basePathWithoutHost']}{$operation['path']}", $callback);
          break;
        case 'PUT':
          $route = $app->put("{$operation['basePathWithoutHost']}{$operation['path']}", $callback);
          break;
        case 'DELETE':
          $route = $app->delete("{$operation['basePathWithoutHost']}{$operation['path']}", $callback);
          break;
        case 'PATCH':
          $route = $app->patch("{$operation['basePathWithoutHost']}{$operation['path']}", $callback);
          break;
        case 'OPTIONS':
          $route = $app->options("{$operation['basePathWithoutHost']}{$operation['path']}", $callback);
          break;
        default:
          $route = $app->map(
            [$operation['httpMethod']],
            "{$operation['basePathWithoutHost']}{$operation['path']}",
            $callback
          );
      }
      $route->setName($operation['operationId']);
      foreach ($middlewares as $middleware) {
        $route->add($middleware);
      }
    }
  }
}
