/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Lamp;
import org.openapitools.model.LampCreate;
import org.openapitools.model.LampUpdate;
import org.openapitools.model.ListLamps200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "lamps", description = "the lamps API")
public interface LampsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /lamps : Create a new lamp
     *
     * @param lampCreate  (required)
     * @return Lamp created successfully (status code 201)
     *         or Invalid request data (status code 400)
     */
    @Operation(
        operationId = "createLamp",
        summary = "Create a new lamp",
        responses = {
            @ApiResponse(responseCode = "201", description = "Lamp created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Lamp.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/lamps",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Lamp>> createLamp(
        @Parameter(name = "LampCreate", description = "", required = true) @Valid @RequestBody LampCreate lampCreate
    ) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"error\" : \"INVALID_ARGUMENT\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }


    /**
     * DELETE /lamps/{lampId} : Delete a lamp
     *
     * @param lampId  (required)
     * @return Lamp deleted successfully (status code 204)
     *         or Invalid lamp ID format (status code 400)
     *         or Lamp not found (status code 404)
     */
    @Operation(
        operationId = "deleteLamp",
        summary = "Delete a lamp",
        responses = {
            @ApiResponse(responseCode = "204", description = "Lamp deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid lamp ID format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Lamp not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/lamps/{lampId}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Void>> deleteLamp(
        @Parameter(name = "lampId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("lampId") String lampId
    ) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"error\" : \"INVALID_ARGUMENT\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }


    /**
     * GET /lamps/{lampId} : Get a specific lamp
     *
     * @param lampId  (required)
     * @return Lamp details (status code 200)
     *         or Not Modified (status code 304)
     *         or Invalid lamp ID format (status code 400)
     *         or Lamp not found (status code 404)
     */
    @Operation(
        operationId = "getLamp",
        summary = "Get a specific lamp",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lamp details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Lamp.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not Modified"),
            @ApiResponse(responseCode = "400", description = "Invalid lamp ID format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Lamp not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/lamps/{lampId}",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Lamp>> getLamp(
        @Parameter(name = "lampId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("lampId") String lampId
    ) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"error\" : \"INVALID_ARGUMENT\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }


    /**
     * GET /lamps : List all lamps
     *
     * @param cursor  (optional)
     * @param pageSize  (optional, default to 25)
     * @return A list of lamps with pagination (status code 200)
     *         or Not Modified (status code 304)
     *         or Invalid request parameters (status code 400)
     */
    @Operation(
        operationId = "listLamps",
        summary = "List all lamps",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of lamps with pagination", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListLamps200Response.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not Modified"),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/lamps",
        produces = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<ListLamps200Response>> listLamps(
        @Parameter(name = "cursor", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cursor", required = false) Optional<String> cursor,
        @Parameter(name = "pageSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "25") Optional<@Min(1) @Max(100) Integer> pageSize
    ) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"nextCursor\" : \"nextCursor\", \"data\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"hasMore\" : true }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"error\" : \"INVALID_ARGUMENT\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }


    /**
     * PUT /lamps/{lampId} : Update a lamp&#39;s status
     *
     * @param lampId  (required)
     * @param lampUpdate  (required)
     * @return Lamp updated successfully (status code 200)
     *         or Invalid request data or lamp ID format (status code 400)
     *         or Lamp not found (status code 404)
     */
    @Operation(
        operationId = "updateLamp",
        summary = "Update a lamp's status",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lamp updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Lamp.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request data or lamp ID format", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Lamp not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/lamps/{lampId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default CompletableFuture<ResponseEntity<Lamp>> updateLamp(
        @Parameter(name = "lampId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("lampId") String lampId,
        @Parameter(name = "LampUpdate", description = "", required = true) @Valid @RequestBody LampUpdate lampUpdate
    ) {
        return CompletableFuture.supplyAsync(()-> {
            getRequest().ifPresent(request -> {
                for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                    if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                        String exampleString = "{ \"error\" : \"INVALID_ARGUMENT\" }";
                        ApiUtil.setExampleResponse(request, "application/json", exampleString);
                        break;
                    }
                }
            });
            return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }, Runnable::run);

    }

}
