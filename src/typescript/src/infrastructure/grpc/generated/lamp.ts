// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: lamp.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "lamp";

/** A lamp with an ID and on/off status */
export interface Lamp {
  id: string;
  status: boolean;
  name: string;
}

export interface CreateLampRequest {
  status: boolean;
  name: string;
}

export interface GetLampRequest {
  id: string;
}

/** Empty request */
export interface ListLampsRequest {
}

export interface ListLampsResponse {
  lamps: Lamp[];
}

export interface UpdateLampRequest {
  id: string;
  status: boolean;
}

export interface DeleteLampRequest {
  id: string;
}

export interface DeleteLampResponse {
  success: boolean;
}

function createBaseLamp(): Lamp {
  return { id: "", status: false, name: "" };
}

export const Lamp: MessageFns<Lamp> = {
  encode(message: Lamp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.status !== false) {
      writer.uint32(16).bool(message.status);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lamp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLamp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lamp {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      status: isSet(object.status) ? globalThis.Boolean(object.status) : false,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Lamp): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.status !== false) {
      obj.status = message.status;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Lamp>, I>>(base?: I): Lamp {
    return Lamp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Lamp>, I>>(object: I): Lamp {
    const message = createBaseLamp();
    message.id = object.id ?? "";
    message.status = object.status ?? false;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateLampRequest(): CreateLampRequest {
  return { status: false, name: "" };
}

export const CreateLampRequest: MessageFns<CreateLampRequest> = {
  encode(message: CreateLampRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== false) {
      writer.uint32(8).bool(message.status);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLampRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLampRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLampRequest {
    return {
      status: isSet(object.status) ? globalThis.Boolean(object.status) : false,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: CreateLampRequest): unknown {
    const obj: any = {};
    if (message.status !== false) {
      obj.status = message.status;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateLampRequest>, I>>(base?: I): CreateLampRequest {
    return CreateLampRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateLampRequest>, I>>(object: I): CreateLampRequest {
    const message = createBaseCreateLampRequest();
    message.status = object.status ?? false;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseGetLampRequest(): GetLampRequest {
  return { id: "" };
}

export const GetLampRequest: MessageFns<GetLampRequest> = {
  encode(message: GetLampRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLampRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLampRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLampRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetLampRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLampRequest>, I>>(base?: I): GetLampRequest {
    return GetLampRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLampRequest>, I>>(object: I): GetLampRequest {
    const message = createBaseGetLampRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseListLampsRequest(): ListLampsRequest {
  return {};
}

export const ListLampsRequest: MessageFns<ListLampsRequest> = {
  encode(_: ListLampsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLampsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLampsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListLampsRequest {
    return {};
  },

  toJSON(_: ListLampsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLampsRequest>, I>>(base?: I): ListLampsRequest {
    return ListLampsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLampsRequest>, I>>(_: I): ListLampsRequest {
    const message = createBaseListLampsRequest();
    return message;
  },
};

function createBaseListLampsResponse(): ListLampsResponse {
  return { lamps: [] };
}

export const ListLampsResponse: MessageFns<ListLampsResponse> = {
  encode(message: ListLampsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.lamps) {
      Lamp.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLampsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLampsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lamps.push(Lamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLampsResponse {
    return { lamps: globalThis.Array.isArray(object?.lamps) ? object.lamps.map((e: any) => Lamp.fromJSON(e)) : [] };
  },

  toJSON(message: ListLampsResponse): unknown {
    const obj: any = {};
    if (message.lamps?.length) {
      obj.lamps = message.lamps.map((e) => Lamp.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLampsResponse>, I>>(base?: I): ListLampsResponse {
    return ListLampsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLampsResponse>, I>>(object: I): ListLampsResponse {
    const message = createBaseListLampsResponse();
    message.lamps = object.lamps?.map((e) => Lamp.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateLampRequest(): UpdateLampRequest {
  return { id: "", status: false };
}

export const UpdateLampRequest: MessageFns<UpdateLampRequest> = {
  encode(message: UpdateLampRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.status !== false) {
      writer.uint32(16).bool(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLampRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLampRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLampRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      status: isSet(object.status) ? globalThis.Boolean(object.status) : false,
    };
  },

  toJSON(message: UpdateLampRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.status !== false) {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLampRequest>, I>>(base?: I): UpdateLampRequest {
    return UpdateLampRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLampRequest>, I>>(object: I): UpdateLampRequest {
    const message = createBaseUpdateLampRequest();
    message.id = object.id ?? "";
    message.status = object.status ?? false;
    return message;
  },
};

function createBaseDeleteLampRequest(): DeleteLampRequest {
  return { id: "" };
}

export const DeleteLampRequest: MessageFns<DeleteLampRequest> = {
  encode(message: DeleteLampRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLampRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLampRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLampRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteLampRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteLampRequest>, I>>(base?: I): DeleteLampRequest {
    return DeleteLampRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteLampRequest>, I>>(object: I): DeleteLampRequest {
    const message = createBaseDeleteLampRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteLampResponse(): DeleteLampResponse {
  return { success: false };
}

export const DeleteLampResponse: MessageFns<DeleteLampResponse> = {
  encode(message: DeleteLampResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteLampResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteLampResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteLampResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteLampResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteLampResponse>, I>>(base?: I): DeleteLampResponse {
    return DeleteLampResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteLampResponse>, I>>(object: I): DeleteLampResponse {
    const message = createBaseDeleteLampResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type LampServiceService = typeof LampServiceService;
export const LampServiceService = {
  /** Create a new lamp with the given status */
  createLamp: {
    path: "/lamp.LampService/CreateLamp",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateLampRequest) => Buffer.from(CreateLampRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateLampRequest.decode(value),
    responseSerialize: (value: Lamp) => Buffer.from(Lamp.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Lamp.decode(value),
  },
  /** Get a lamp by its ID */
  getLamp: {
    path: "/lamp.LampService/GetLamp",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetLampRequest) => Buffer.from(GetLampRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetLampRequest.decode(value),
    responseSerialize: (value: Lamp) => Buffer.from(Lamp.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Lamp.decode(value),
  },
  /** List all lamps */
  listLamps: {
    path: "/lamp.LampService/ListLamps",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListLampsRequest) => Buffer.from(ListLampsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListLampsRequest.decode(value),
    responseSerialize: (value: ListLampsResponse) => Buffer.from(ListLampsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListLampsResponse.decode(value),
  },
  /** Update a lamp's status */
  updateLamp: {
    path: "/lamp.LampService/UpdateLamp",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateLampRequest) => Buffer.from(UpdateLampRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateLampRequest.decode(value),
    responseSerialize: (value: Lamp) => Buffer.from(Lamp.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Lamp.decode(value),
  },
  /** Delete a lamp */
  deleteLamp: {
    path: "/lamp.LampService/DeleteLamp",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteLampRequest) => Buffer.from(DeleteLampRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteLampRequest.decode(value),
    responseSerialize: (value: DeleteLampResponse) => Buffer.from(DeleteLampResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteLampResponse.decode(value),
  },
} as const;

export interface LampServiceServer extends UntypedServiceImplementation {
  /** Create a new lamp with the given status */
  createLamp: handleUnaryCall<CreateLampRequest, Lamp>;
  /** Get a lamp by its ID */
  getLamp: handleUnaryCall<GetLampRequest, Lamp>;
  /** List all lamps */
  listLamps: handleUnaryCall<ListLampsRequest, ListLampsResponse>;
  /** Update a lamp's status */
  updateLamp: handleUnaryCall<UpdateLampRequest, Lamp>;
  /** Delete a lamp */
  deleteLamp: handleUnaryCall<DeleteLampRequest, DeleteLampResponse>;
}

export interface LampServiceClient extends Client {
  /** Create a new lamp with the given status */
  createLamp(
    request: CreateLampRequest,
    callback: (error: ServiceError | null, response: Lamp) => void,
  ): ClientUnaryCall;
  createLamp(
    request: CreateLampRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Lamp) => void,
  ): ClientUnaryCall;
  createLamp(
    request: CreateLampRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Lamp) => void,
  ): ClientUnaryCall;
  /** Get a lamp by its ID */
  getLamp(request: GetLampRequest, callback: (error: ServiceError | null, response: Lamp) => void): ClientUnaryCall;
  getLamp(
    request: GetLampRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Lamp) => void,
  ): ClientUnaryCall;
  getLamp(
    request: GetLampRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Lamp) => void,
  ): ClientUnaryCall;
  /** List all lamps */
  listLamps(
    request: ListLampsRequest,
    callback: (error: ServiceError | null, response: ListLampsResponse) => void,
  ): ClientUnaryCall;
  listLamps(
    request: ListLampsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListLampsResponse) => void,
  ): ClientUnaryCall;
  listLamps(
    request: ListLampsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListLampsResponse) => void,
  ): ClientUnaryCall;
  /** Update a lamp's status */
  updateLamp(
    request: UpdateLampRequest,
    callback: (error: ServiceError | null, response: Lamp) => void,
  ): ClientUnaryCall;
  updateLamp(
    request: UpdateLampRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Lamp) => void,
  ): ClientUnaryCall;
  updateLamp(
    request: UpdateLampRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Lamp) => void,
  ): ClientUnaryCall;
  /** Delete a lamp */
  deleteLamp(
    request: DeleteLampRequest,
    callback: (error: ServiceError | null, response: DeleteLampResponse) => void,
  ): ClientUnaryCall;
  deleteLamp(
    request: DeleteLampRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteLampResponse) => void,
  ): ClientUnaryCall;
  deleteLamp(
    request: DeleteLampRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteLampResponse) => void,
  ): ClientUnaryCall;
}

export const LampServiceClient = makeGenericClientConstructor(LampServiceService, "lamp.LampService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): LampServiceClient;
  service: typeof LampServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
