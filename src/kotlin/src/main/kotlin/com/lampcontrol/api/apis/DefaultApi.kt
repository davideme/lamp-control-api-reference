/**
* Lamp Control API
* A simple API for controlling lamps, demonstrating CRUD operations. 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lampcontrol.api.apis

import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import com.lampcontrol.api.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import com.lampcontrol.api.infrastructure.ApiPrincipal
import com.lampcontrol.api.models.Lamp
import com.lampcontrol.api.models.LampCreate
import com.lampcontrol.api.models.LampUpdate

fun Route.DefaultApi() {
    val empty = mutableMapOf<String, Any?>()

    post<Paths.createLamp> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "status" : true
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    delete<Paths.deleteLamp> {
        call.respond(HttpStatusCode.NotImplemented)
        
    }

    get<Paths.getLamp> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "status" : true
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.listLamps> {
        val exampleContentType = "application/json"
        val exampleContentString = """[ {
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "status" : true
        }, {
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "status" : true
        } ]"""
        
        when (exampleContentType) {
            "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    put<Paths.updateLamp> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "status" : true
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

}
