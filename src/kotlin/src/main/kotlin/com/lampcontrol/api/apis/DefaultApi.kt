/**
* Lamp Control API
* A simple API for controlling lamps, demonstrating CRUD operations. 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.lampcontrol.api.apis

import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import io.ktor.server.request.*
import com.lampcontrol.api.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import com.lampcontrol.api.infrastructure.ApiPrincipal
import com.lampcontrol.api.models.Lamp
import com.lampcontrol.api.models.LampCreate
import com.lampcontrol.api.models.LampUpdate
import com.lampcontrol.repository.LampRepository

fun Route.DefaultApi(lampService: LampRepository) {

    post<Paths.createLamp> {
        try {
            val lampCreate = call.receive<LampCreate>()
            val createdLamp = lampService.createLamp(lampCreate)
            call.respond(HttpStatusCode.Created, createdLamp)
        } catch (e: Exception) {
            call.respond(HttpStatusCode.BadRequest, mapOf("error" to "Invalid request body"))
        }
    }

    delete<Paths.deleteLamp> {
        val lampId = it.lampId
        val deleted = lampService.deleteLamp(lampId)
        if (deleted) {
            call.respond(HttpStatusCode.NoContent)
        } else {
            call.respond(HttpStatusCode.NotFound, mapOf("error" to "Lamp not found"))
        }
    }

    get<Paths.getLamp> {
        val lampId = it.lampId
        val lamp = lampService.getLampById(lampId)
        if (lamp != null) {
            call.respond(HttpStatusCode.OK, lamp)
        } else {
            call.respond(HttpStatusCode.NotFound, mapOf("error" to "Lamp not found"))
        }
    }

    get<Paths.listLamps> {
        val lamps = lampService.getAllLamps()
        call.respond(HttpStatusCode.OK, lamps)
    }

    put<Paths.updateLamp> {
        try {
            val lampId = it.lampId
            val lampUpdate = call.receive<LampUpdate>()
            val updatedLamp = lampService.updateLamp(lampId, lampUpdate)
            if (updatedLamp != null) {
                call.respond(HttpStatusCode.OK, updatedLamp)
            } else {
                call.respond(HttpStatusCode.NotFound, mapOf("error" to "Lamp not found"))
            }
        } catch (e: Exception) {
            call.respond(HttpStatusCode.BadRequest, mapOf("error" to "Invalid request body"))
        }
    }
}
