// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Lamp defines model for Lamp.
type Lamp struct {
	// Id Unique identifier for the lamp
	Id openapi_types.UUID `json:"id"`

	// Status Whether the lamp is turned on (true) or off (false)
	Status bool `json:"status"`
}

// LampCreate defines model for LampCreate.
type LampCreate struct {
	// Status Initial status of the lamp (on/off)
	Status bool `json:"status"`
}

// LampUpdate defines model for LampUpdate.
type LampUpdate struct {
	// Status New status of the lamp (on/off)
	Status bool `json:"status"`
}

// CreateLampJSONRequestBody defines body for CreateLamp for application/json ContentType.
type CreateLampJSONRequestBody = LampCreate

// UpdateLampJSONRequestBody defines body for UpdateLamp for application/json ContentType.
type UpdateLampJSONRequestBody = LampUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all lamps
	// (GET /lamps)
	ListLamps(w http.ResponseWriter, r *http.Request)
	// Create a new lamp
	// (POST /lamps)
	CreateLamp(w http.ResponseWriter, r *http.Request)
	// Delete a lamp
	// (DELETE /lamps/{lampId})
	DeleteLamp(w http.ResponseWriter, r *http.Request, lampId string)
	// Get a specific lamp
	// (GET /lamps/{lampId})
	GetLamp(w http.ResponseWriter, r *http.Request, lampId string)
	// Update a lamp's status
	// (PUT /lamps/{lampId})
	UpdateLamp(w http.ResponseWriter, r *http.Request, lampId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all lamps
// (GET /lamps)
func (_ Unimplemented) ListLamps(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new lamp
// (POST /lamps)
func (_ Unimplemented) CreateLamp(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a lamp
// (DELETE /lamps/{lampId})
func (_ Unimplemented) DeleteLamp(w http.ResponseWriter, r *http.Request, lampId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a specific lamp
// (GET /lamps/{lampId})
func (_ Unimplemented) GetLamp(w http.ResponseWriter, r *http.Request, lampId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a lamp's status
// (PUT /lamps/{lampId})
func (_ Unimplemented) UpdateLamp(w http.ResponseWriter, r *http.Request, lampId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListLamps operation middleware
func (siw *ServerInterfaceWrapper) ListLamps(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLamps(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateLamp operation middleware
func (siw *ServerInterfaceWrapper) CreateLamp(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLamp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteLamp operation middleware
func (siw *ServerInterfaceWrapper) DeleteLamp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "lampId" -------------
	var lampId string

	err = runtime.BindStyledParameterWithOptions("simple", "lampId", chi.URLParam(r, "lampId"), &lampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lampId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLamp(w, r, lampId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLamp operation middleware
func (siw *ServerInterfaceWrapper) GetLamp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "lampId" -------------
	var lampId string

	err = runtime.BindStyledParameterWithOptions("simple", "lampId", chi.URLParam(r, "lampId"), &lampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lampId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLamp(w, r, lampId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateLamp operation middleware
func (siw *ServerInterfaceWrapper) UpdateLamp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "lampId" -------------
	var lampId string

	err = runtime.BindStyledParameterWithOptions("simple", "lampId", chi.URLParam(r, "lampId"), &lampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lampId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLamp(w, r, lampId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/lamps", wrapper.ListLamps)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/lamps", wrapper.CreateLamp)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/lamps/{lampId}", wrapper.DeleteLamp)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/lamps/{lampId}", wrapper.GetLamp)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/lamps/{lampId}", wrapper.UpdateLamp)
	})

	return r
}

type ListLampsRequestObject struct {
}

type ListLampsResponseObject interface {
	VisitListLampsResponse(w http.ResponseWriter) error
}

type ListLamps200JSONResponse []Lamp

func (response ListLamps200JSONResponse) VisitListLampsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateLampRequestObject struct {
	Body *CreateLampJSONRequestBody
}

type CreateLampResponseObject interface {
	VisitCreateLampResponse(w http.ResponseWriter) error
}

type CreateLamp201JSONResponse Lamp

func (response CreateLamp201JSONResponse) VisitCreateLampResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLampRequestObject struct {
	LampId string `json:"lampId"`
}

type DeleteLampResponseObject interface {
	VisitDeleteLampResponse(w http.ResponseWriter) error
}

type DeleteLamp204Response struct {
}

func (response DeleteLamp204Response) VisitDeleteLampResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteLamp404Response struct {
}

func (response DeleteLamp404Response) VisitDeleteLampResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetLampRequestObject struct {
	LampId string `json:"lampId"`
}

type GetLampResponseObject interface {
	VisitGetLampResponse(w http.ResponseWriter) error
}

type GetLamp200JSONResponse Lamp

func (response GetLamp200JSONResponse) VisitGetLampResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLamp404Response struct {
}

func (response GetLamp404Response) VisitGetLampResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateLampRequestObject struct {
	LampId string `json:"lampId"`
	Body   *UpdateLampJSONRequestBody
}

type UpdateLampResponseObject interface {
	VisitUpdateLampResponse(w http.ResponseWriter) error
}

type UpdateLamp200JSONResponse Lamp

func (response UpdateLamp200JSONResponse) VisitUpdateLampResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLamp404Response struct {
}

func (response UpdateLamp404Response) VisitUpdateLampResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all lamps
	// (GET /lamps)
	ListLamps(ctx context.Context, request ListLampsRequestObject) (ListLampsResponseObject, error)
	// Create a new lamp
	// (POST /lamps)
	CreateLamp(ctx context.Context, request CreateLampRequestObject) (CreateLampResponseObject, error)
	// Delete a lamp
	// (DELETE /lamps/{lampId})
	DeleteLamp(ctx context.Context, request DeleteLampRequestObject) (DeleteLampResponseObject, error)
	// Get a specific lamp
	// (GET /lamps/{lampId})
	GetLamp(ctx context.Context, request GetLampRequestObject) (GetLampResponseObject, error)
	// Update a lamp's status
	// (PUT /lamps/{lampId})
	UpdateLamp(ctx context.Context, request UpdateLampRequestObject) (UpdateLampResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListLamps operation middleware
func (sh *strictHandler) ListLamps(w http.ResponseWriter, r *http.Request) {
	var request ListLampsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListLamps(ctx, request.(ListLampsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListLamps")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListLampsResponseObject); ok {
		if err := validResponse.VisitListLampsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateLamp operation middleware
func (sh *strictHandler) CreateLamp(w http.ResponseWriter, r *http.Request) {
	var request CreateLampRequestObject

	var body CreateLampJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLamp(ctx, request.(CreateLampRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLamp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateLampResponseObject); ok {
		if err := validResponse.VisitCreateLampResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteLamp operation middleware
func (sh *strictHandler) DeleteLamp(w http.ResponseWriter, r *http.Request, lampId string) {
	var request DeleteLampRequestObject

	request.LampId = lampId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLamp(ctx, request.(DeleteLampRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLamp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteLampResponseObject); ok {
		if err := validResponse.VisitDeleteLampResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLamp operation middleware
func (sh *strictHandler) GetLamp(w http.ResponseWriter, r *http.Request, lampId string) {
	var request GetLampRequestObject

	request.LampId = lampId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLamp(ctx, request.(GetLampRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLamp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLampResponseObject); ok {
		if err := validResponse.VisitGetLampResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateLamp operation middleware
func (sh *strictHandler) UpdateLamp(w http.ResponseWriter, r *http.Request, lampId string) {
	var request UpdateLampRequestObject

	request.LampId = lampId

	var body UpdateLampJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLamp(ctx, request.(UpdateLampRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLamp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateLampResponseObject); ok {
		if err := validResponse.VisitUpdateLampResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVT0skPxD9KqF+P1iFZnpcPfXNVZABWZYF2YPrIXZXO5F0ElPVyjD0d18qaWfWmRF1",
	"US+dJn+q3ntVL1lC7bvgHTomqJZA9Rw7nX7PdRdkDNEHjGwwzZpGvg1SHU1g4x1UcOHMXY/KNOjYtAaj",
	"an1UPEdlJUYBrY+dZqig700DBfAiIFRAHI27gaEAYs09bUf+NUee4zqWMqS4jw4b5Z3a49jjvvJR+bZV",
	"e622hPvr8NfeW9QOhqGAiHe9idhAdQkJwpjxarXbX99izQJGiJ9E1Izb9J8DOnOGjbYqryvfriHveVf6",
	"tn0FsBcwXYTmTZi+48MH4ZGNxrV+O+exItMFi+r4xyx1Qe0dR2+tcTcpPRWqwc474qhZJk9+XpwqoaMl",
	"BE1+OwFm2EpCoa1OcggJCQXcY6Sc62AynUxFHB/Q6WCggsPJdHIIBQTN86RImXLK3w2yDKtMs0biG+Lz",
	"tEOYU/COsqZfp1MZBD26dFCHYE2djpa3JAAe3ZJswdilg/9HbKGC/8q1r8rRVGVy1LBSU8eoF1nMTRGt",
	"IZaiZfSyg/qu03ExYlba2sfFAoKnHdxyC59nB0pZkfibbxZv4vUSndEnw9PWEV8OW4oevGvmXcKldqkT",
	"pEZRX9dI1PbWLjYkzKiVVg4f8h0l67lXyqUMs2bIzW0xW+6ptqdpftQ26Kg7ZIwE1eUSjCCRBoQCnO6k",
	"0jkibEpU/EV340ocrrbkO9p2W+KbMW7yLeDo2RPOs2p975oNWTIrpUdJit2eOUP+XOLTz+mbBlkbS/8m",
	"3Rmy0ooC1qY19UrA0O8QMN/jH67hxxh+fIReZfhPKlyfIL2HATK50QBfaHw9c2LCeP9YpT5aqKC8P4Dh",
	"avgTAAD//3p0KilDCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
