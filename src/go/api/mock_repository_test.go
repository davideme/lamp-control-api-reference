// Code generated by MockGen. DO NOT EDIT.
// Source: api/repository.go
//
// Generated by this command:
//
//	mockgen -source=api/repository.go -destination=api/mock_repository_test.go -package=api
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLampRepository is a mock of LampRepository interface.
type MockLampRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLampRepositoryMockRecorder
	isgomock struct{}
}

// MockLampRepositoryMockRecorder is the mock recorder for MockLampRepository.
type MockLampRepositoryMockRecorder struct {
	mock *MockLampRepository
}

// NewMockLampRepository creates a new mock instance.
func NewMockLampRepository(ctrl *gomock.Controller) *MockLampRepository {
	mock := &MockLampRepository{ctrl: ctrl}
	mock.recorder = &MockLampRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLampRepository) EXPECT() *MockLampRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLampRepository) Create(ctx context.Context, lamp Lamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, lamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLampRepositoryMockRecorder) Create(ctx, lamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLampRepository)(nil).Create), ctx, lamp)
}

// Delete mocks base method.
func (m *MockLampRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLampRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLampRepository)(nil).Delete), ctx, id)
}

// Exists mocks base method.
func (m *MockLampRepository) Exists(ctx context.Context, id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockLampRepositoryMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockLampRepository)(nil).Exists), ctx, id)
}

// GetByID mocks base method.
func (m *MockLampRepository) GetByID(ctx context.Context, id string) (Lamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(Lamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLampRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLampRepository)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockLampRepository) List(ctx context.Context) ([]Lamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]Lamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLampRepositoryMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLampRepository)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockLampRepository) Update(ctx context.Context, lamp Lamp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, lamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLampRepositoryMockRecorder) Update(ctx, lamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLampRepository)(nil).Update), ctx, lamp)
}
