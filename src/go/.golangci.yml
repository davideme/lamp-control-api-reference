# golangci-lint configuration file
# https://golangci-lint.run/usage/configuration/

run:
  # Timeout for analysis
  timeout: 5m
  
  # Exit code when at least one issue was found
  issues-exit-code: 1
  
  # Include test files in analysis
  tests: true
  
  # Skip vendor directories
  skip-dirs:
    - vendor
    - bin
    - .git
  
  # Skip files matching these patterns
  skip-files:
    - ".*\\.gen\\.go$"
    - ".*_gen\\.go$"

# Output configuration
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  format: colored-line-number
  
  # Print lines of code with issue
  print-issued-lines: true
  
  # Print linter name in the end of issue text
  print-linter-name: true
  
  # Make issues output unique by line
  uniq-by-line: true
  
  # Add a prefix to the output file references
  path-prefix: ""
  
  # Sort results by: filepath, line and column
  sort-results: true

# All available settings of specific linters
linters-settings:
  # Errcheck settings
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    check-type-assertions: true
    
    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    check-blank: true
    
    # List of functions to exclude from checking
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)

  # Gocyclo settings
  gocyclo:
    # Minimal code complexity to report
    min-complexity: 15

  # Goimports settings
  goimports:
    # Put imports beginning with prefix after 3rd-party packages
    local-prefixes: github.com/davideme/lamp-control-api-reference

  # Golint settings
  golint:
    # Minimal confidence for issues
    min-confidence: 0.8

  # Govet settings
  govet:
    # Report about shadowed variables
    check-shadowing: true
    
    # Settings per analyzer
    settings:
      printf:
        # Comma-separated list of print function names to check
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  # Lll settings (line length limit)
  lll:
    # Max line length, lines longer will be reported
    line-length: 120

  # Misspell settings
  misspell:
    # Correct spellings using locale preferences for US or UK
    locale: US
    
    # List of words to ignore
    ignore-words:
      - someword

  # Nakedret settings
  nakedret:
    # Make an issue if func has more lines of code than this setting
    max-func-lines: 30

  # Prealloc settings
  prealloc:
    # Report preallocation suggestions only on simple loops
    simple: true
    range-loops: true
    for-loops: false

  # Unparam settings
  unparam:
    # Inspect exported functions
    check-exported: false

  # Unused settings
  unused:
    # Select the Go version to target
    go: "1.24"

  # Whitespace settings
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

# Linters to enable/disable
linters:
  enable:
    # Default linters
    - errcheck      # Errcheck is a program for checking for unchecked errors in Go programs
    - gosimple      # Linter for Go source code that specializes in simplifying a code
    - govet         # Vet examines Go source code and reports suspicious constructs
    - ineffassign   # Detects when assignments to existing variables are not used
    - staticcheck   # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - typecheck     # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused        # Checks Go code for unused constants, variables, functions and types
    
    # Additional recommended linters
    - gocyclo       # Computes and checks the cyclomatic complexity of functions
    - gofmt         # Gofmt checks whether code was gofmt-ed
    - goimports     # Check import statements are formatted according to the 'goimport' command
    - golint        # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    - gosec         # Inspects source code for security problems
    - misspell      # Finds commonly misspelled English words in comments
    - nakedret      # Finds naked returns in functions greater than a specified function length
    - prealloc      # Finds slice declarations that could potentially be preallocated
    - unparam       # Reports unused function parameters
    - whitespace    # Tool for detection of leading and trailing whitespace
    - lll           # Reports long lines
    - goconst       # Finds repeated strings that could be replaced by a constant
    - gocritic      # Provides diagnostics that check for bugs, performance and style issues
    - gocognit      # Computes and checks the cognitive complexity of functions
    - bodyclose     # Checks whether HTTP response body is closed successfully
    - noctx         # Noctx finds sending http request without context.Context
    - rowserrcheck  # Checks whether Err of rows is checked successfully
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed

  disable:
    - deadcode      # Deprecated, replaced by unused
    - varcheck      # Deprecated, replaced by unused
    - structcheck   # Deprecated, replaced by unused
    - scopelint     # Deprecated, replaced by exportloopref

# Issues configuration
issues:
  # List of regexps of issue texts to exclude
  exclude:
    # Exclude some linters from running on tests files
    - "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*printf?|os\\.(Un)?Setenv). is not checked"
    
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - goconst
        
    # Exclude known linters from partially hard-to-fix issues
    - linters:
        - typecheck
      text: "undeclared name"
      
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

  # Independently from option `exclude` we use default exclude patterns
  exclude-use-default: false
  
  # Maximum issues count per one linter
  max-issues-per-linter: 0
  
  # Maximum count of issues with the same text
  max-same-issues: 0
  
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed
  new: false

severity:
  # Default value is empty string.
  # Set the default severity for issues
  default-severity: error
  
  # The default value is false.
  # If set to true severity-rules regular expressions become case sensitive.
  case-sensitive: false
  
  # Default value is empty list.
  # When a list of severity rules are provided, severity information will be added to lint
  # issues. Severity rules have the same filtering capability as exclude rules except you
  # are allowed to specify one matcher per severity rule.
  rules:
    - linters:
      - dupl
      severity: info
