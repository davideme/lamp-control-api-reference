name: TypeScript CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/typescript/**'
      - '.github/workflows/typescript-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/typescript/**'
      - '.github/workflows/typescript-ci.yml'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      issues: write
      contents: write
      pull-requests: write
    defaults:
      run:
        working-directory: src/typescript

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: src/typescript/package-lock.json

    - name: Install dependencies
      run: npm ci
      
    - name: Type Check
      run: npm run typecheck
      
    - name: Lint & Format Check
      id: lint
      run: npm run lint -- --fix

    - uses: reviewdog/action-suggester@v1
      with:
        tool_name: npm run lint -- --fix
        fail_level: error

    - name: Build
      run: npm run build
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: src/typescript/coverage/
        
    - name: Check test coverage threshold
      run: |
        COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        STATEMENTS=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')
        BRANCHES=$(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')
        FUNCTIONS=$(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')
        
        echo "## TypeScript Code Coverage" >> $GITHUB_STEP_SUMMARY
        echo "| Type | Coverage |" >> $GITHUB_STEP_SUMMARY
        echo "| ---- | -------- |" >> $GITHUB_STEP_SUMMARY
        echo "| Lines | $COVERAGE% |" >> $GITHUB_STEP_SUMMARY
        echo "| Statements | $STATEMENTS% |" >> $GITHUB_STEP_SUMMARY
        echo "| Branches | $BRANCHES% |" >> $GITHUB_STEP_SUMMARY
        echo "| Functions | $FUNCTIONS% |" >> $GITHUB_STEP_SUMMARY
        
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Test coverage is below 80% (Current: $COVERAGE%)"
          exit 1
        fi

    - name: Commit coverage summary
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add coverage/coverage-summary.json || true
        git commit -m "chore: update TypeScript coverage summary" || exit 0
        git push

  schemathesis-testing:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      checks: write
      issues: write
      contents: read
    defaults:
      run:
        working-directory: src/typescript

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: src/typescript/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start API in background
      run: |
        npm run dev &
        echo $! > api.pid
        sleep 15

    - name: Wait for API to be ready
      run: |
        timeout 30 bash -c 'until curl -f -s http://localhost:8080/v1/lamps > /dev/null; do sleep 1; done'
        echo "API is ready!"

    - name: Run Schemathesis tests
      uses: schemathesis/action@v2
      with:
        schema: docs/api/openapi.yaml
        base-url: http://localhost:8080/v1
        max-examples: 100
        checks: status_code_conformance,not_a_server_error,response_schema_conformance
        args: '--report junit --report-junit-path schemathesis-report.xml'

    - name: Stop API
      run: |
        if [ -f api.pid ]; then
          kill $(cat api.pid) || true
          rm api.pid
        fi

    - name: Upload Schemathesis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: typescript-schemathesis-report
        path: |
          schemathesis-report.xml
        retention-days: 30

    - name: Check Schemathesis results
      run: |
        if [ -f schemathesis-report.xml ]; then
          # Check if there were any failures in the XML report
          if grep -q 'failures="[1-9]' schemathesis-report.xml || grep -q 'errors="[1-9]' schemathesis-report.xml; then
            echo "❌ Schemathesis found API issues!"
            echo "Check the uploaded report for details."
            exit 1
          else
            echo "✅ Schemathesis tests passed!"
          fi
        else
          echo "⚠️ No Schemathesis report found"
        fi

  docker-build-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
    defaults:
      run:
        working-directory: src/typescript

    steps:
    - uses: actions/checkout@v4

    - name: Copy OpenAPI spec to TypeScript directory
      run: |
        mkdir -p docs/api
        cp ../../docs/api/openapi.yaml ./docs/api/

    - name: Build Docker image
      run: |
        docker build -t lamp-control-api-ts:latest .

    - name: Test Docker container
      run: |
        # Start container in background
        docker run --rm -d -p 8080:8080 --name lamp-api-test lamp-control-api-ts:latest
        
        # Wait for container to be ready
        timeout 30 bash -c 'until docker exec lamp-api-test curl -f http://127.0.0.1:8080/health > /dev/null 2>&1; do sleep 2; done'
        
        # Test health endpoint
        docker exec lamp-api-test curl -s http://127.0.0.1:8080/health | grep '"status":"ok"'
        
        # Test API endpoint
        docker exec lamp-api-test curl -s http://127.0.0.1:8080/v1/lamps | grep '"data":\[\]'
        
        # Stop container
        docker stop lamp-api-test
        
        echo "✅ Docker container tests passed!"

    - name: Check Docker image size
      run: |
        echo "## Docker Image Information" >> $GITHUB_STEP_SUMMARY
        docker images lamp-control-api-ts:latest --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}" >> $GITHUB_STEP_SUMMARY
