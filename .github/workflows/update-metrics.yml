name: Update Code Metrics

on:
  push:
    branches: [ main ]
    paths:
      - 'typescript/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-metrics:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: tools/package-lock.json

    - name: Install dependencies
      run: |
        cd tools
        npm ci
        cd ../src/typescript
        npm ci

    - name: Run TypeScript tests with coverage
      run: |
        cd src/typescript
        npm run test:coverage
        COVERAGE=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)

    - name: Run TypeScript metrics analysis
      run: |
        cd tools
        
        # Run the metrics analysis
        node typescript-metrics.js
        
        # Get the latest metrics file
        METRICS_FILE=$(ls -t metrics_reports/typescript/metrics-*.json | head -n1)
        
        if [ ! -f "$METRICS_FILE" ]; then
          echo "No metrics file found"
          exit 1
        fi
        
        # Extract metrics from the JSON file
        APP_LINES=$(jq -r '.summary.application.lines.total // 0' "$METRICS_FILE")
        TEST_LINES=$(jq -r '.summary.tests.lines.total // 0' "$METRICS_FILE")
        TEST_RATIO=$(jq -r '.summary.ratios.testToCode // "N/A"' "$METRICS_FILE")
        
        # Get coverage from the previous step
        COVERAGE=$(cat ../src/typescript/coverage/coverage-summary.json | jq -r '.total.lines.pct')
        
        # Create the metrics table
        {
          echo "| Language    | App Lines | Test Lines | Test/App Ratio | Coverage % |"
          echo "|------------|-----------|------------|----------------|------------|"
          echo "| TypeScript | $APP_LINES | $TEST_LINES | $TEST_RATIO | $COVERAGE |"
        } > metrics.md

    - name: Update COMPARISON.md
      run: |
        # Read the current metrics
        METRICS=$(cat tools/metrics.md)
        
        # Update the metrics section in COMPARISON.md
        awk -v metrics="$METRICS" '
        BEGIN { p=1 }
        /^## Code Metrics$/ { p=0; print; print ""; print metrics; next }
        /^##[^#]/ { p=1 }
        p { print }
        ' docs/COMPARISON.md > docs/COMPARISON.md.tmp
        mv docs/COMPARISON.md.tmp docs/COMPARISON.md

    - name: Commit changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add docs/COMPARISON.md
        git commit -m "docs: update code metrics in COMPARISON.md" || exit 0
        git push 

  scc-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: [typescript, python, java, php, ruby, go]

    steps:
      - uses: actions/checkout@v4
      - name: Count lines in src/${{ matrix.folder }}
        id: scc
        run: |
          # Regular analysis (all files)
          output=$(docker run --rm -v "$PWD:/pwd" ghcr.io/boyter/scc:v3.5.0 scc --format-multi "tabular:stdout,json:/pwd/docs/loc/scc-${{ matrix.folder }}.json" /pwd/src/${{ matrix.folder }})
          echo "## SCC Output for ${{ matrix.folder }} (all files)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          output_no_tests=$(docker run --rm -v "$PWD:/pwd" ghcr.io/boyter/scc:v3.5.0 scc --not-match 'tests' --not-match 'test_|test\..[^/]+$' --format-multi "tabular:stdout,json:/pwd/docs/loc/scc-${{ matrix.folder }}-no-tests.json" /pwd/src/${{ matrix.folder }})
          echo "## SCC Output for ${{ matrix.folder }} (excluding tests)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$output_no_tests" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Fix permissions for SCC output
        run: |
          sudo chown -R $(id -u):$(id -g) docs/loc
          sudo chmod -R u+rw docs/loc  

      - name: Upload SCC JSON results
        uses: actions/upload-artifact@v4
        with:
          name: scc-json-${{ matrix.folder }}
          path: |
            docs/loc/scc-${{ matrix.folder }}.json
            docs/loc/scc-${{ matrix.folder }}-no-tests.json

  scc-results:
    runs-on: ubuntu-latest
    needs: scc-matrix
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all SCC JSON results
        uses: actions/download-artifact@v4
        with:
          path: docs/loc

      - name: Commit SCC JSON results
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add docs/loc/**/*.json || true
          git commit -m "chore: update SCC code metrics JSON files" || exit 0
          git push

      - name: Generate SCC table
        run: |
          echo "| Language   | App Lines | Test Lines |"
          echo "|------------|-----------|------------|"

          for lang in typescript python java php ruby go; do
            app_lines=$(jq '[.[].Code]' docs/loc/scc-json-${lang}/scc-${lang}-no-tests.json | jq 'add')
            total_lines=$(jq '[.[].Code]' docs/loc/scc-json-${lang}/scc-${lang}.json | jq 'add')
            test_lines=$((total_lines - app_lines))
            echo "| $(echo $lang | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}') | $app_lines | $test_lines |"
          done
