name: Update Code Metrics

on:
  push:
    branches: [ main ]
    paths:
      - 'typescript/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  scc-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: [typescript, python, java, csharp, php, go, kotlin, ruby]

    steps:
      - uses: actions/checkout@v4
      - name: Count lines in src/${{ matrix.folder }}
        id: scc
        run: |
          # Regular analysis (all files)
          output=$(docker run --rm -v "$PWD:/pwd" ghcr.io/boyter/scc:v3.5.0 scc --dryness --format-multi "tabular:stdout,json:/pwd/docs/loc/scc-${{ matrix.folder }}.json" /pwd/src/${{ matrix.folder }})
          echo "## SCC Output for ${{ matrix.folder }} (all files)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          output_no_tests=$(docker run --rm -v "$PWD:/pwd" ghcr.io/boyter/scc:v3.5.0 scc --dryness --not-match 'test' --not-match 'test_|test\..[^/]+$' --format-multi "tabular:stdout,json:/pwd/docs/loc/scc-${{ matrix.folder }}-no-tests.json" /pwd/src/${{ matrix.folder }})
          echo "## SCC Output for ${{ matrix.folder }} (excluding tests)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$output_no_tests" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Fix permissions for SCC output
        run: |
          sudo chown -R $(id -u):$(id -g) docs/loc
          sudo chmod -R u+rw docs/loc  

      - name: Upload SCC JSON results
        uses: actions/upload-artifact@v4
        with:
          name: scc-json-${{ matrix.folder }}
          path: |
            docs/loc/scc-${{ matrix.folder }}.json
            docs/loc/scc-${{ matrix.folder }}-no-tests.json

  scc-results:
    runs-on: ubuntu-latest
    needs: scc-matrix
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all SCC JSON results
        uses: actions/download-artifact@v4
        with:
          path: docs/loc

      - name: Commit SCC JSON results
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add docs/loc/**/*.json || true
          git commit -m "chore: update SCC code metrics JSON files" || exit 0
          git push

      - name: Extract code coverage percentages
        id: coverage
        run: |
          # TypeScript coverage
          if [ -f src/typescript/coverage/coverage-summary.json ]; then
            TS_COVERAGE=$(jq '.total.lines.pct' src/typescript/coverage/coverage-summary.json)
          else
            TS_COVERAGE="N/A"
          fi
          echo "TypeScript coverage: $TS_COVERAGE"
          echo "TS_COVERAGE=$TS_COVERAGE" >> $GITHUB_ENV

          # Python coverage
          if [ -f src/python/coverage/coverage.json ]; then
            PY_COVERAGE=$(jq '.totals.percent_covered | floor' src/python/coverage/coverage.json)
          else
            PY_COVERAGE="N/A"
          fi
          echo "Python coverage: $PY_COVERAGE"
          echo "PY_COVERAGE=$PY_COVERAGE" >> $GITHUB_ENV

          # Java coverage
          if [ -f src/java/target/site/jacoco/jacoco.xml ]; then
            # Extract line coverage from JaCoCo XML using grep and sed
            JAVA_MISSED=$(grep '<counter type="LINE"' src/java/target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*missed="\([0-9]*\)".*/\1/')
            JAVA_COVERED=$(grep '<counter type="LINE"' src/java/target/site/jacoco/jacoco.xml | tail -1 | sed 's/.*covered="\([0-9]*\)".*/\1/')
            if [[ "$JAVA_MISSED" =~ ^[0-9]+$ && "$JAVA_COVERED" =~ ^[0-9]+$ ]]; then
              JAVA_TOTAL=$((JAVA_MISSED + JAVA_COVERED))
              if [ "$JAVA_TOTAL" -gt 0 ]; then
                JAVA_COVERAGE=$(awk "BEGIN {printf \"%.0f\", ($JAVA_COVERED/$JAVA_TOTAL)*100}")
              else
                JAVA_COVERAGE="0"
              fi
            else
              JAVA_COVERAGE="N/A"
            fi
          else
            JAVA_COVERAGE="N/A"
          fi
          echo "Java coverage: $JAVA_COVERAGE"
          echo "JAVA_COVERAGE=$JAVA_COVERAGE" >> $GITHUB_ENV

      - name: Generate SCC table
        run: |
          echo "| Language   | App Lines | Test Lines | Test/App Ratio | Coverage (%) |" > tools/metrics.md
          echo "|------------|-----------|------------|---------------|--------------|" >> tools/metrics.md

          # Define language display names and corresponding folder names
          langs=("TypeScript:typescript" "Python:python" "Java:java" "C#:csharp" "PHP:php" "Go:go" "Kotlin:kotlin" "Ruby:ruby")

          for entry in "${langs[@]}"; do
            lang_name="${entry%%:*}"
            folder="${entry##*:}"
            app_lines=$(jq --arg lang_name "$lang_name" '[.[] | select(.Name == $lang_name) | .Code] | add' docs/loc/scc-json-${folder}/scc-${folder}-no-tests.json)
            total_lines=$(jq --arg lang_name "$lang_name" '[.[] | select(.Name == $lang_name) | .Code] | add' docs/loc/scc-json-${folder}/scc-${folder}.json)
            test_lines=$((total_lines - app_lines))
            if [[ "$app_lines" =~ ^[0-9]+$ && "$app_lines" -ne 0 ]]; then
              ratio=$(awk "BEGIN {printf \"%.2f\", $test_lines/$app_lines}")
            else
              ratio="N/A"
            fi

            # Add coverage
            if [[ "$lang_name" == "TypeScript" ]]; then
              coverage="${TS_COVERAGE:-N/A}"
            elif [[ "$lang_name" == "Python" ]]; then
              coverage="${PY_COVERAGE:-N/A}"
            elif [[ "$lang_name" == "Java" ]]; then
              coverage="${JAVA_COVERAGE:-N/A}"
            else
              coverage="N/A"
            fi

            echo "| $lang_name | $app_lines | $test_lines | $ratio | $coverage |" >> tools/metrics.md
          done

      - name: Update COMPARISON.md
        run: |
          # Read the current metrics
          METRICS=$(cat tools/metrics.md)
          
          # Update the metrics section in COMPARISON.md
          awk -v metrics="$METRICS" '
          BEGIN { p=1 }
          /^## Code Metrics$/ { p=0; print; print ""; print metrics; next }
          /^##[^#]/ { p=1 }
          p { print }
          ' docs/COMPARISON.md > docs/COMPARISON.md.tmp
          mv docs/COMPARISON.md.tmp docs/COMPARISON.md

      - name: Commit changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add docs/COMPARISON.md
          git commit -m "docs: update code metrics in COMPARISON.md" || exit 0
          git push 