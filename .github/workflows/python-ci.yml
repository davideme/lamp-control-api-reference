name: Python CI

on:
  push:
    branches: [ main ]
    paths:
      - 'src/python/**'
      - '.github/workflows/python-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/python/**'
      - '.github/workflows/python-ci.yml'

permissions:
  contents: write

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      issues: write
      pull-requests: write    
    defaults:
      run:
        working-directory: src/python
    strategy:
      matrix:
        python-version: ['3.12']

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lamp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: mysql
          MYSQL_DATABASE: lamp_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      mongodb:
        image: mongo:7
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: src/python/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('src/python/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Auto-format code
      run: |
        poetry run black .
        poetry run ruff check . --fix

    - uses: reviewdog/action-suggester@v1
      with:
        tool_name: black and ruff
        # fail_level: error      

    - name: Run code quality checks
      run: |
        poetry run black . --check --diff
        poetry run ruff check . --diff

      # poetry run mypy .

    - name: Run tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: lamp_test
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: mysql
        MYSQL_DATABASE: lamp_test
        MONGODB_URI: mongodb://localhost:27017/lamp_test
      run: |
        poetry run pytest --cov=src --cov-report=json:coverage/coverage.json

    - name: Force add coverage summary
      if: github.ref == 'refs/heads/main'
      run: git add -f coverage/coverage.json

    - name: Create Pull Request for coverage summary
      if: github.ref == 'refs/heads/main'
      uses: peter-evans/create-pull-request@v6
      with:
        commit-message: "chore: update coverage summary"
        title: "chore: update coverage summary"
        body: "Automated PR to update coverage/coverage.json after test run."
        branch: "ci/python-coverage-update"
