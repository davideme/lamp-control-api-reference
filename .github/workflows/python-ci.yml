name: Python CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/python/**'
      - '.github/workflows/python-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/python/**'
      - '.github/workflows/python-ci.yml'
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    permissions:
      checks: write
      issues: write
      contents: write
      pull-requests: write    
    defaults:
      run:
        working-directory: src/python
    strategy:
      matrix:
        python-version: ['3.12']

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lamp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: mysql
          MYSQL_DATABASE: lamp_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      mongodb:
        image: mongo:7
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Install poetry
      run: pipx install poetry

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
        cache-dependency-path: 'src/python/poetry.lock'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: src/python/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('src/python/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Auto-format code
      run: |
        poetry run black .
        poetry run ruff check . --fix

    - uses: reviewdog/action-suggester@v1
      with:
        tool_name: black and ruff
        # fail_level: error      

    - name: Run code quality checks
      run: |
        poetry run black . --check --diff
        poetry run ruff check . --diff

      # poetry run mypy .

    - name: Run tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: lamp_test
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: mysql
        MYSQL_DATABASE: lamp_test
        MONGODB_URI: mongodb://localhost:27017/lamp_test
      run: |
        poetry run pytest --cov=src --cov-report=json:coverage/coverage.json

    - name: Commit coverage summary
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add coverage/coverage.json || true
        git commit -m "chore: update Python coverage summary" || exit 0
        git push

  schemathesis-testing:
    name: Schemathesis API Testing
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        python-version: ['3.12']
    defaults:
      run:
        working-directory: src/python

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install poetry
      run: pipx install poetry

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
        cache-dependency-path: 'src/python/poetry.lock'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: src/python/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('src/python/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Start API in background
      run: |
        poetry run uvicorn src.openapi_server.main:app --host 0.0.0.0 --port 8000 &
        echo $! > api.pid
        sleep 10

    - name: Wait for API to be ready
      run: |
        timeout 30 bash -c 'until curl -f -s http://localhost:8000/v1/lamps > /dev/null; do sleep 1; done'
        echo "API is ready!"

    - name: Run Schemathesis tests
      uses: schemathesis/action@v2
      with:
        schema: docs/api/openapi.yaml
        base-url: http://localhost:8000/v1
        max-examples: 100
        checks: status_code_conformance,not_a_server_error,response_schema_conformance
        report: junit
        report-name: schemathesis-report.xml

    - name: Stop API
      run: |
        if [ -f api.pid ]; then
          kill $(cat api.pid) || true
          rm api.pid
        fi

    - name: Upload Schemathesis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-schemathesis-report
        path: |
          schemathesis-report.xml
        retention-days: 30

    - name: Check Schemathesis results
      run: |
        if [ -f schemathesis-report.xml ]; then
          # Check if there were any failures in the XML report
          if grep -q 'failures="[1-9]' schemathesis-report.xml || grep -q 'errors="[1-9]' schemathesis-report.xml; then
            echo "❌ Schemathesis found API issues!"
            echo "Check the uploaded report for details."
            exit 1
          else
            echo "✅ Schemathesis tests passed!"
          fi
        else
          echo "⚠️ No Schemathesis report found"
        fi
