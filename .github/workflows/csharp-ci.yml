name: C# CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/csharp/**'
      - '.github/workflows/csharp-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/csharp/**'
      - '.github/workflows/csharp-ci.yml'
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality & Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.x']
    defaults:
      run:
        working-directory: src/csharp/LampControlApi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        cache: true
        cache-dependency-path: src/csharp/LampControlApi/packages.lock.json
        
    - name: Install dependencies
      run: dotnet restore --locked-mode

    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
    
    - name: Run static analysis
      run: dotnet build --verbosity normal --configuration Release
    
    - name: Build application
      run: dotnet build --no-restore --configuration Release
    
    - name: Run tests
      run: |
        dotnet test --configuration Release --logger trx --results-directory ./TestResults

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: csharp-build-artifacts
        path: |
          bin/
          obj/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.x']
    defaults:
      run:
        working-directory: src/csharp/LampControlApi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        cache: true
        cache-dependency-path: src/csharp/LampControlApi/packages.lock.json
        
    - name: Install dependencies
      run: dotnet restore --locked-mode
    
    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-scan.log
        if grep -q "has the following vulnerable packages" security-scan.log; then
          echo "❌ Vulnerable packages found!"
          cat security-scan.log
          exit 1
        else
          echo "✅ No vulnerable packages found."
        fi
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: security-scan.log
        retention-days: 30

  publish-ready:
    name: Verify Publish Ready
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    strategy:
      matrix:
        dotnet-version: ['8.x']
    defaults:
      run:
        working-directory: src/csharp/LampControlApi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        cache: true
        cache-dependency-path: src/csharp/LampControlApi/packages.lock.json
        
    - name: Install dependencies
      run: dotnet restore --locked-mode
    
    - name: Build for Release
      run: dotnet build --configuration Release --no-restore
    
    - name: Publish application
      run: dotnet publish --configuration Release --no-build --output ./publish
    
    - name: Upload publish artifacts
      uses: actions/upload-artifact@v4
      with:
        name: csharp-publish-artifacts
        path: publish/
        retention-days: 30

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.x']
    defaults:
      run:
        working-directory: src/csharp/LampControlApi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        cache: true
        cache-dependency-path: src/csharp/LampControlApi/packages.lock.json
        
    - name: Install dependencies
      run: dotnet restore --locked-mode
    
    - name: Install coverage tools
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    
    - name: Run tests with coverage
      run: |
        dotnet test \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger trx \
          --no-restore || echo "No tests found, skipping coverage"
    
    - name: Generate coverage report
      run: |
        if [ -d "./coverage" ]; then
          reportgenerator \
            -reports:"./coverage/**/coverage.cobertura.xml" \
            -targetdir:"./coverage/report" \
            -reporttypes:"Html;Cobertura"
          echo "✅ Coverage report generated"
        else
          echo "⚠️ No coverage data found - tests may not exist yet"
        fi
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

    - name: Commit coverage summary
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add coverage/report/Cobertura.xml || true
        git commit -m "chore: update C# coverage summary" || exit 0
        git push

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.x']
    defaults:
      run:
        working-directory: src/csharp/LampControlApi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        cache: true
        cache-dependency-path: src/csharp/LampControlApi/packages.lock.json
        
    - name: Install dependencies
      run: dotnet restore --locked-mode
    
    - name: List all packages
      run: |
        echo "## Direct Dependencies" > dependency-report.md
        dotnet list package >> dependency-report.md
        echo "" >> dependency-report.md
        echo "## Transitive Dependencies" >> dependency-report.md
        dotnet list package --include-transitive >> dependency-report.md
        echo "" >> dependency-report.md
        echo "## Outdated Packages" >> dependency-report.md
        dotnet list package --outdated >> dependency-report.md || echo "All packages are up to date" >> dependency-report.md
    
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: dependency-report.md
        retention-days: 30

  schemathesis-testing:
    name: Schemathesis API Testing
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        dotnet-version: ['8.x']
    defaults:
      run:
        working-directory: src/csharp/LampControlApi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        cache: true
        cache-dependency-path: src/csharp/LampControlApi/packages.lock.json
        
    - name: Install dependencies
      run: dotnet restore --locked-mode
    
    - name: Build application
      run: dotnet build --no-restore --configuration Release
    
    - name: Start API in background
      run: |
        dotnet run --configuration Release --no-build --urls "http://localhost:5169" &
        echo $! > api.pid
        sleep 10
    
    - name: Wait for API to be ready
      run: |
        timeout 30 bash -c 'until curl -f -s http://localhost:5169/swagger/v1/swagger.json > /dev/null; do sleep 1; done'
        echo "API is ready!"
    
    - name: Run Schemathesis tests
      uses: schemathesis/action@v2
      with:
        schema: docs/api/openapi.yaml
        base-url: http://localhost:5169/v1
        max-examples: 100
        checks: status_code_conformance,not_a_server_error,response_schema_conformance
        report: junit
        report-name: schemathesis-report.xml
    
    - name: Stop API
      run: |
        if [ -f api.pid ]; then
          kill $(cat api.pid) || true
          rm api.pid
        fi
    
    - name: Upload Schemathesis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: schemathesis-report
        path: |
          schemathesis-report.xml
        retention-days: 30
    
    - name: Check Schemathesis results
      run: |
        if [ -f schemathesis-report.xml ]; then
          # Check if there were any failures in the XML report
          if grep -q 'failures="[1-9]' schemathesis-report.xml || grep -q 'errors="[1-9]' schemathesis-report.xml; then
            echo "❌ Schemathesis found API issues!"
            echo "Check the uploaded report for details."
            exit 1
          else
            echo "✅ Schemathesis tests passed!"
          fi
        else
          echo "⚠️ No Schemathesis report found"
        fi
