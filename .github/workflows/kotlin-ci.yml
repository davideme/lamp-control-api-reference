name: Kotlin CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/kotlin/**'
      - '.github/workflows/kotlin-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/kotlin/**'
      - '.github/workflows/kotlin-ci.yml'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      issues: write
      contents: write
      pull-requests: write
    defaults:
      run:
        working-directory: src/kotlin

    strategy:
      matrix:
        java-version: [21]

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v3

    - name: Compile Kotlin code
      run: ./gradlew compileKotlin compileTestKotlin

    - name: Run tests with coverage
      run: ./gradlew test jacocoTestReport
      continue-on-error: false

    - name: Verify code coverage threshold
      run: ./gradlew jacocoTestCoverageVerification
      continue-on-error: false

    - name: Check code formatting (ktlint)
      run: ./gradlew ktlintCheck
      continue-on-error: true

    - name: Run detekt static analysis
      run: ./gradlew detekt
      continue-on-error: true

    - name: Build application
      run: ./gradlew build

    - name: Generate test reports
      run: ./gradlew test
      if: always()

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kotlin-test-results
        path: src/kotlin/build/reports/tests/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kotlin-coverage-reports
        path: src/kotlin/build/reports/jacoco/

    - name: Commit coverage summary
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add build/reports/jacoco/test/jacocoTestReport.xml || true
        git commit -m "chore: update Kotlin coverage summary" || exit 0
        git push

  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: ['21']
    defaults:
      run:
        working-directory: src/kotlin

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Run ktlint formatting check
      run: ./gradlew ktlintCheck
      continue-on-error: true

    - name: Run detekt analysis
      run: ./gradlew detekt
      continue-on-error: true

    - name: Generate ktlint report
      run: ./gradlew ktlintFormat
      if: always()

    - name: Generate detekt report
      run: ./gradlew detekt
      if: always()

    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kotlin-code-quality-reports
        path: |
          src/kotlin/build/reports/ktlint/
          src/kotlin/build/reports/detekt/

  schemathesis-testing:
    name: Schemathesis API Testing
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        java-version: ['21']
    defaults:
      run:
        working-directory: src/kotlin

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x gradlew
    
    - name: Build application
      run: ./gradlew build --no-daemon
    
    - name: Start API in background
      run: |
        ./gradlew run --no-daemon &
        echo $! > api.pid
        sleep 15
    
    - name: Wait for API to be ready
      run: |
        timeout 30 bash -c 'until curl -f -s http://localhost:8080/health > /dev/null; do sleep 1; done'
        echo "API is ready!"
    
    - name: Run Schemathesis tests
      uses: schemathesis/action@v2
      with:
        schema: docs/api/openapi.yaml
        base-url: http://localhost:8080/v1
        max-examples: 100
        checks: status_code_conformance,not_a_server_error,response_schema_conformance
        args: '--report junit --report-junit-path schemathesis-report.xml'
    
    - name: Stop API
      run: |
        if [ -f api.pid ]; then
          kill $(cat api.pid) || true
          rm api.pid
        fi
    
    - name: Upload Schemathesis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kotlin-schemathesis-report
        path: |
          schemathesis-report.xml
        retention-days: 30
    
    - name: Check Schemathesis results
      run: |
        if [ -f schemathesis-report.xml ]; then
          # Check if there were any failures in the XML report
          if grep -q 'failures="[1-9]' schemathesis-report.xml || grep -q 'errors="[1-9]' schemathesis-report.xml; then
            echo "❌ Schemathesis found API issues!"
            echo "Check the uploaded report for details."
            exit 1
          else
            echo "✅ Schemathesis tests passed!"
          fi
        else
          echo "⚠️ No Schemathesis report found"
        fi
